generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  phone                String               @unique
  password_hash        String
  name                 String
  role                 UserRole
  is_verified          Boolean              @default(false)
  is_active            Boolean              @default(true)
  avatar_url           String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  otp_code             String?
  otp_expires_at       DateTime?
  doctor_appointments  Appointment[]        @relation("DoctorAppointments")
  patient_appointments Appointment[]        @relation("PatientAppointments")
  audit_logs           AuditLog[]
  doctor_profile       DoctorProfile?
  lab_orders           LabOrder[]
  sent_messages        Message[]            @relation("SentMessages")
  received_messages    Message[]            @relation("ReceivedMessages")
  patient_profile      PatientProfile?
  payment_transactions PaymentTransaction[]
  pharmacy_orders      PharmacyOrder[]
  prescriptions_written Prescription[]      @relation("DoctorPrescriptions")
  prescriptions_received Prescription[]     @relation("PatientPrescriptions")
  reviews              Review[]

  @@map("users")
}

model PatientProfile {
  id                String    @id @default(cuid())
  user_id           String    @unique
  date_of_birth     DateTime?
  gender            Gender?
  address           String?
  emergency_contact String?
  blood_group       String?
  allergies         String[]  @default([])
  medical_history   String?
  insurance_info    Json?
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("patient_profiles")
}

model DoctorProfile {
  id                  String              @id @default(cuid())
  user_id             String              @unique
  medical_license     String              @unique
  specialties         String[]            @default([])
  qualifications      String[]            @default([])
  experience_years    Int
  consultation_fee    Decimal
  languages           String[]            @default([])
  clinic_locations    Json[]              @default([])
  bio                 String?
  bank_info           Json?
  availability_hours  Json?
  is_available_online Boolean             @default(true)
  rating              Decimal             @default(0)
  total_reviews       Int                 @default(0)
  availability_slots  AvailabilitySlot[]
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  verification        DoctorVerification?
  prescriptions       Prescription[]      @relation("DoctorProfilePrescriptions")

  @@map("doctor_profiles")
}

model DoctorVerification {
  id               String             @id @default(cuid())
  doctor_id        String             @unique
  status           VerificationStatus @default(PENDING)
  documents        Json[]             @default([])
  reviewed_by      String?
  reviewed_at      DateTime?
  rejection_reason String?
  notes            String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  doctor           DoctorProfile      @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  @@map("doctor_verifications")
}

model AvailabilitySlot {
  id                 String        @id @default(cuid())
  doctor_id          String
  start_time         DateTime
  end_time           DateTime
  is_recurring       Boolean       @default(false)
  recurrence_pattern Json?
  slot_duration      Int           @default(30)
  is_booked          Boolean       @default(false)
  is_available       Boolean       @default(true)
  created_at         DateTime      @default(now())
  appointments       Appointment[]
  doctor             DoctorProfile @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

model Appointment {
  id                     String              @id @default(cuid())
  patient_id             String
  doctor_id              String
  slot_id                String?
  status                 AppointmentStatus   @default(PENDING)
  payment_status         PaymentStatus       @default(PENDING)
  meeting_type           MeetingType         @default(VIDEO)
  meeting_link           String?
  meeting_token          String?
  scheduled_at           DateTime
  started_at             DateTime?
  ended_at               DateTime?
  duration_minutes       Int?
  notes                  String?
  symptoms               String?
  diagnosis              String?
  follow_up_date         DateTime?
  is_follow_up           Boolean             @default(false)
  parent_appointment_id  String?
  recording_url          String?
  recording_consent      Boolean             @default(false)
  created_at             DateTime            @default(now())
  updated_at             DateTime            @updatedAt
  doctor                 User                @relation("DoctorAppointments", fields: [doctor_id], references: [id])
  parent_appointment     Appointment?        @relation("FollowUpAppointments", fields: [parent_appointment_id], references: [id])
  follow_up_appointments Appointment[]       @relation("FollowUpAppointments")
  patient                User                @relation("PatientAppointments", fields: [patient_id], references: [id])
  slot                   AvailabilitySlot?   @relation(fields: [slot_id], references: [id])
  messages               Message[]
  payment_transaction    PaymentTransaction?
  prescription           Prescription?
  review                 Review?

  @@map("appointments")
}

model Prescription {
  id                     String          @id @default(cuid())
  appointment_id         String          @unique
  doctor_id              String
  patient_id             String
  drugs                  Json[]          @default([])
  instructions           String?
  diagnosis              String?
  follow_up_instructions String?
  pdf_url                String?
  is_signed              Boolean         @default(false)
  digital_signature      String?
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  pharmacy_orders        PharmacyOrder[]
  appointment            Appointment     @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  doctor_user            User            @relation("DoctorPrescriptions", fields: [doctor_id], references: [id], map: "prescription_doctor_user_fkey")
  patient_user           User            @relation("PatientPrescriptions", fields: [patient_id], references: [id], map: "prescription_patient_user_fkey")
  doctor_profile         DoctorProfile   @relation("DoctorProfilePrescriptions", fields: [doctor_id], references: [user_id], map: "prescription_doctor_profile_fkey")

  @@map("prescriptions")
}

model PaymentTransaction {
  id                     String        @id @default(cuid())
  user_id                String
  appointment_id         String?       @unique
  amount                 Decimal
  currency               String        @default("BDT")
  status                 PaymentStatus @default(PENDING)
  gateway_id             String
  gateway_transaction_id String?
  gateway_response       Json?
  description            String?
  refund_amount          Decimal?      @default(0)
  refund_reason          String?
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  appointment            Appointment?  @relation(fields: [appointment_id], references: [id])
  user                   User          @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model LabOrder {
  id                        String      @id @default(cuid())
  patient_id                String
  appointment_id            String?
  // Reference to either a LabPackage or individual LabTest
  package_id                String?
  test_id                   String?
  vendor_id                 String?
  status                    OrderStatus @default(PENDING)
  total_amount              Decimal
  sample_collection_date    DateTime?
  sample_collection_address String?
  result_url                String?
  result_pdf                String?
  lab_report_date           DateTime?
  instructions              String?
  created_at                DateTime    @default(now())
  updated_at                DateTime    @updatedAt
  patient                   User        @relation(fields: [patient_id], references: [id])
  package                   LabPackage? @relation(fields: [package_id], references: [id])
  test                      LabTest?    @relation(fields: [test_id], references: [id])

  @@map("lab_orders")
}

model PharmacyOrder {
  id                    String        @id @default(cuid())
  patient_id            String
  prescription_id       String?
  vendor_id             String?
  status                OrderStatus   @default(PENDING)
  total_amount          Decimal
  delivery_address      String
  delivery_date         DateTime?
  tracking_number       String?
  items                 Json[]        @default([])
  delivery_instructions String?
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  patient               User          @relation(fields: [patient_id], references: [id])
  prescription          Prescription? @relation(fields: [prescription_id], references: [id])

  @@map("pharmacy_orders")
}

model Message {
  id             String       @id @default(cuid())
  from_user_id   String
  to_user_id     String
  appointment_id String?
  body           String
  attachments    Json[]       @default([])
  is_read        Boolean      @default(false)
  read_at        DateTime?
  created_at     DateTime     @default(now())
  appointment    Appointment? @relation(fields: [appointment_id], references: [id])
  from_user      User         @relation("SentMessages", fields: [from_user_id], references: [id])
  to_user        User         @relation("ReceivedMessages", fields: [to_user_id], references: [id])

  @@map("messages")
}

model Review {
  id             String      @id @default(cuid())
  appointment_id String      @unique
  patient_id     String
  doctor_id      String
  rating         Int
  comment        String?
  is_anonymous   Boolean     @default(false)
  is_approved    Boolean     @default(true)
  moderated_by   String?
  moderated_at   DateTime?
  created_at     DateTime    @default(now())
  appointment    Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        User        @relation(fields: [patient_id], references: [id])

  @@map("reviews")
}

model AuditLog {
  id          String   @id @default(cuid())
  user_id     String?
  action      String
  resource    String
  resource_id String?
  details     Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())
  user        User?    @relation(fields: [user_id], references: [id])

  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_configs")
}

model Medicine {
  id                    String   @id @default(cuid())
  name                  String
  generic_name          String?
  brand_name            String?
  manufacturer          String?
  category              String
  strength              String
  unit_price            Decimal
  stock_quantity        Int      @default(0)
  description           String?
  side_effects          String?
  contraindications     String?
  dosage_instructions   String?
  prescription_required Boolean  @default(true)
  image_url             String?
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("medicines")
}

model LabTest {
  id                       String   @id @default(cuid())
  name                     String   @unique
  code                     String   @unique
  description              String?
  category                 String
  price                    Decimal
  sample_type              String
  preparation_required     Boolean  @default(false)
  preparation_instructions String?
  reporting_time           String
  normal_range             String?
  is_active                Boolean  @default(true)
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  lab_packages             LabPackageTest[]
  lab_orders               LabOrder[]

  @@map("lab_tests")
}

model LabPackage {
  id                       String   @id @default(cuid())
  name                     String
  description              String?
  category                 String
  price                    Decimal
  preparation_required     Boolean  @default(false)
  preparation_instructions String?
  sample_type              String?
  reporting_time           String?
  is_home_collection       Boolean  @default(false)
  is_active                Boolean  @default(true)
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  lab_package_tests        LabPackageTest[]
  lab_orders               LabOrder[]

  @@map("lab_packages")
}

model LabPackageTest {
  id           String   @id @default(cuid())
  package_id   String
  test_id      String
  created_at   DateTime @default(now())
  package      LabPackage @relation(fields: [package_id], references: [id], onDelete: Cascade)
  test         LabTest    @relation(fields: [test_id], references: [id], onDelete: Cascade)

  @@unique([package_id, test_id])
  @@map("lab_package_tests")
}

model Specialty {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon_url    String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("specialties")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
  PHARMACY
  LAB
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  COMPLETED
}

enum MeetingType {
  VIDEO
  AUDIO
  CHAT
}